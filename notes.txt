List library

Description

- library will give a struct that implements a basic list 
- the list will dynamically resize on its own and will keep track of count 
- the list will only be able to hold one type of object 
- the basic list will have the following functions: 
    List list_create(initialCapacity)
    void list_append(object) 
    object list_get(index)
    void list_insert(index, object)
    object list_pop()
    object list_remove(index)
    ----------------Only Defined For Primitive Types----------------------
    int list_contains(object)
    int list_find(object)

- the library will provide lists to store ints, chars, doubles 
- for each types list, the function name will be [function_name]_[typename] (ex: list_create_char(initialCapacity)) 
- hopefully, the library will have a tool for creating a list that contain any 
struct of data type 
- the first argument to every function will be a pointer to the list itself, this is left out of the description 


How It Will Work

- there will be one implementation of a list that holds a generic data type 
    - this list will only need to know the size of the data type 
    - it will then work on the byte (char in C) level to implement the functions 
- all exposed lists will be a wrapper of this generic list
    - they will handle all setting of type sizes and casting 
- once I get a feel for what is needed to wrap the generic list, a tool can be built that 
    automates the process of writing a wrapper by giving the name of the type 
    
    
